#!/bin/bash

# Ninja Build Script for Phi Compiler
# Advanced build automation with Ninja generator

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Build configuration
BUILD_DIR="build"
CMAKE_BUILD_DIR="cmake-build-ninja"
INSTALL_DIR="install"

# Default values
BUILD_TYPE="Release"
VERBOSE=false
CLEAN_FIRST=false
SHOW_STATS=false
PARALLEL_JOBS=""

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE} $1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS] [TARGET]

Ninja build script for Phi compiler with advanced features.

OPTIONS:
    -t, --type TYPE         Build type: Debug, Release, RelWithDebInfo, MinSizeRel (default: Release)
    -j, --jobs N            Number of parallel jobs (default: auto-detect)
    -c, --clean             Clean before building
    -v, --verbose           Verbose output
    -s, --stats             Show build statistics
    -h, --help              Show this help message

TARGETS:
    build                   Build the project (default)
    clean                   Clean build files
    configure               Configure CMake only
    rebuild                 Clean and build
    install                 Install the project
    test                    Run tests (if available)
    list-targets           List all available ninja targets
    graph                  Generate build dependency graph
    compdb                 Generate compilation database

EXAMPLES:
    $0                                    # Build with default settings
    $0 -t Debug -v                      # Debug build with verbose output
    $0 -t Release -j 8 -c              # Release build with 8 jobs, clean first
    $0 rebuild                          # Clean and rebuild
    $0 list-targets                     # Show available targets
    $0 graph                            # Generate dependency graph

EOF
}

# Function to detect optimal job count
detect_jobs() {
    if [[ -n "$PARALLEL_JOBS" ]]; then
        echo "$PARALLEL_JOBS"
    elif command -v nproc >/dev/null 2>&1; then
        echo "$(nproc)"
    elif command -v sysctl >/dev/null 2>&1; then
        echo "$(sysctl -n hw.ncpu 2>/dev/null || echo 4)"
    else
        echo "4"
    fi
}

# Function to configure CMake with Ninja
configure_cmake() {
    print_header "Configuring CMake with Ninja"

    mkdir -p "$CMAKE_BUILD_DIR"
    cd "$CMAKE_BUILD_DIR"

    local cmake_args=(
        -G "Ninja"
        -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DCMAKE_INSTALL_PREFIX="../$INSTALL_DIR"
    )

    # Add additional CMake arguments based on build type
    case "$BUILD_TYPE" in
        "Debug")
            cmake_args+=(-DCMAKE_CXX_FLAGS_DEBUG="-g -O0 -fno-omit-frame-pointer")
            ;;
        "Release")
            cmake_args+=(-DCMAKE_CXX_FLAGS_RELEASE="-O3 -DNDEBUG -march=native")
            ;;
        "RelWithDebInfo")
            cmake_args+=(-DCMAKE_CXX_FLAGS_RELWITHDEBINFO="-O2 -g -DNDEBUG")
            ;;
    esac

    if [[ "$VERBOSE" == true ]]; then
        cmake_args+=(-DCMAKE_VERBOSE_MAKEFILE=ON)
    fi

    print_info "CMake command: cmake ${cmake_args[*]} .."

    if cmake "${cmake_args[@]}" ..; then
        print_success "CMake configuration completed"

        # Copy compile commands to root for tools like clangd
        if [[ -f "compile_commands.json" ]]; then
            cp compile_commands.json ../
            print_info "Copied compile_commands.json to project root"
        fi
    else
        print_error "CMake configuration failed"
        exit 1
    fi

    cd ..
}

# Function to build with ninja
build_project() {
    print_header "Building with Ninja"

    if [[ ! -f "$CMAKE_BUILD_DIR/build.ninja" ]]; then
        print_warning "build.ninja not found, configuring first..."
        configure_cmake
    fi

    cd "$CMAKE_BUILD_DIR"

    local ninja_args=()
    local jobs=$(detect_jobs)

    ninja_args+=(-j "$jobs")

    if [[ "$VERBOSE" == true ]]; then
        ninja_args+=(-v)
    fi

    print_info "Building with $jobs parallel jobs"
    print_info "Ninja command: ninja ${ninja_args[*]}"

    local start_time=$(date +%s)

    if ninja "${ninja_args[@]}"; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))
        print_success "Build completed in ${duration}s"

        if [[ "$SHOW_STATS" == true ]]; then
            show_build_stats
        fi
    else
        print_error "Build failed"
        exit 1
    fi

    cd ..
}

# Function to show build statistics
show_build_stats() {
    print_header "Build Statistics"

    if [[ -f "$CMAKE_BUILD_DIR/build.ninja" ]]; then
        cd "$CMAKE_BUILD_DIR"

        print_info "Ninja targets:"
        ninja -t targets | head -10

        print_info "Build graph info:"
        ninja -t graph | wc -l | xargs echo "Total build edges:"

        print_info "Compilation database entries:"
        if [[ -f "compile_commands.json" ]]; then
            jq length compile_commands.json 2>/dev/null || echo "jq not available"
        fi

        cd ..
    fi
}

# Function to clean build
clean_build() {
    print_header "Cleaning Build"

    if [[ -d "$CMAKE_BUILD_DIR" ]]; then
        cd "$CMAKE_BUILD_DIR"
        if [[ -f "build.ninja" ]]; then
            ninja -t clean
            print_success "Ninja clean completed"
        fi
        cd ..
    fi

    # Option to remove entire build directory
    read -p "Remove entire build directory? [y/N]: " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$CMAKE_BUILD_DIR"
        rm -f compile_commands.json
        print_success "Build directory removed"
    fi
}

# Function to list ninja targets
list_targets() {
    print_header "Available Ninja Targets"

    if [[ -f "$CMAKE_BUILD_DIR/build.ninja" ]]; then
        cd "$CMAKE_BUILD_DIR"
        ninja -t targets all | column -t
        cd ..
    else
        print_error "No build.ninja found. Run configure first."
        exit 1
    fi
}

# Function to generate dependency graph
generate_graph() {
    print_header "Generating Dependency Graph"

    if [[ -f "$CMAKE_BUILD_DIR/build.ninja" ]]; then
        cd "$CMAKE_BUILD_DIR"

        # Generate DOT file
        ninja -t graph > dependency_graph.dot
        print_info "Dependency graph saved to: $CMAKE_BUILD_DIR/dependency_graph.dot"

        # Try to generate PNG if graphviz is available
        if command -v dot >/dev/null 2>&1; then
            dot -Tpng dependency_graph.dot -o dependency_graph.png
            print_success "Dependency graph PNG saved to: $CMAKE_BUILD_DIR/dependency_graph.png"
        else
            print_warning "Graphviz not installed. Install it to generate PNG: brew install graphviz"
        fi

        cd ..
    else
        print_error "No build.ninja found. Run configure first."
        exit 1
    fi
}

# Function to install project
install_project() {
    print_header "Installing Project"

    if [[ ! -f "$CMAKE_BUILD_DIR/build.ninja" ]]; then
        print_warning "Project not built yet, building first..."
        build_project
    fi

    cd "$CMAKE_BUILD_DIR"

    if ninja install; then
        print_success "Installation completed to: $INSTALL_DIR"
    else
        print_error "Installation failed"
        exit 1
    fi

    cd ..
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            BUILD_TYPE="$2"
            shift 2
            ;;
        -j|--jobs)
            PARALLEL_JOBS="$2"
            shift 2
            ;;
        -c|--clean)
            CLEAN_FIRST=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -s|--stats)
            SHOW_STATS=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        clean)
            clean_build
            exit 0
            ;;
        configure)
            configure_cmake
            exit 0
            ;;
        rebuild)
            CLEAN_FIRST=true
            # Continue to build
            shift
            ;;
        install)
            install_project
            exit 0
            ;;
        list-targets)
            list_targets
            exit 0
            ;;
        graph)
            generate_graph
            exit 0
            ;;
        compdb)
            configure_cmake
            print_success "Compilation database generated: compile_commands.json"
            exit 0
            ;;
        build|*)
            # Default action is build
            shift
            ;;
    esac
done

# Validate build type
case "$BUILD_TYPE" in
    "Debug"|"Release"|"RelWithDebInfo"|"MinSizeRel")
        ;;
    *)
        print_error "Invalid build type: $BUILD_TYPE"
        print_info "Valid types: Debug, Release, RelWithDebInfo, MinSizeRel"
        exit 1
        ;;
esac

# Check if ninja is available
if ! command -v ninja >/dev/null 2>&1; then
    print_error "Ninja not found. Please install ninja:"
    print_info "  macOS: brew install ninja"
    print_info "  Ubuntu: sudo apt install ninja-build"
    print_info "  Arch: sudo pacman -S ninja"
    exit 1
fi

# Check if cmake is available
if ! command -v cmake >/dev/null 2>&1; then
    print_error "CMake not found. Please install cmake"
    exit 1
fi

# Main execution
print_header "Phi Compiler - Ninja Build"
print_info "Build type: $BUILD_TYPE"
print_info "Jobs: $(detect_jobs)"
print_info "Verbose: $VERBOSE"

# Clean if requested
if [[ "$CLEAN_FIRST" == true ]]; then
    if [[ -d "$CMAKE_BUILD_DIR" ]]; then
        cd "$CMAKE_BUILD_DIR"
        if [[ -f "build.ninja" ]]; then
            ninja -t clean
            print_success "Pre-build clean completed"
        fi
        cd ..
    fi
fi

# Configure and build
configure_cmake
build_project

print_success "All done! Executable: $CMAKE_BUILD_DIR/phi"
