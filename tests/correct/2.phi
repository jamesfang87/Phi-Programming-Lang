// Complete program test - demonstrates all language features working together
// This program should parse and analyze without any errors

fun main() {
    let result: i64 = run_calculations();
    let message: str = get_completion_message();
    return;
}

fun run_calculations() -> i64 {
    let numbers: i64 = initialize_data();
    let processed: i64 = process_numbers(numbers);
    let final_result: i64 = apply_filters(processed);
    return final_result;
}

fun initialize_data() -> i64 {
    let base_value: i64 = 100;
    let multiplier: i64 = 3;
    let offset: i64 = 25;

    let calculated: i64 = (base_value * multiplier) + offset;
    return calculated;
}

fun process_numbers(input: i64) -> i64 {
    let result: i64 = input;
    let counter: i64 = 0;

    // Apply processing loop
    while (counter < 5) {
        result = result + calculate_increment(counter);
        counter = counter + 1;
    }

    // Apply conditional adjustments
    if (result > 500) {
        result = result / 2;
    } else {
        if (result < 100) {
            result = result * 2;
        } else {
            result = result + 50;
        }
    }

    return result;
}

fun calculate_increment(step: i64) -> i64 {
    let base_increment: i64 = 10;
    let step_multiplier: i64 = step * 2;
    let increment: i64 = base_increment + step_multiplier;
    return increment;
}

fun apply_filters(value: i64) -> i64 {
    let filtered_value: i64 = value;
    let filter_count: i64 = 0;

    // Apply multiple filter passes
    for pass in 1..5 {
        filtered_value = apply_single_filter(filtered_value, pass);
        filter_count = filter_count + 1;
    }

    // Final adjustment based on filter count
    let adjustment: i64 = filter_count * 5;
    filtered_value = filtered_value + adjustment;

    return filtered_value;
}

fun apply_single_filter(input: i64, filter_type: i64) -> i64 {
    let output: i64 = input;

    if (filter_type == 1) {
        // Type 1 filter: reduce by 10%
        output = (output * 9) / 10;
    } else {
        if (filter_type == 2) {
            // Type 2 filter: add square root approximation
            output = output + estimate_sqrt(output);
        } else {
            // Default filter: add 20
            output = output + 20;
        }
    }

    return output;
}

fun estimate_sqrt(number: i64) -> i64 {
    let estimate: i64 = number / 2;
    let iterations: i64 = 0;

    // Simple approximation using Newton's method (simplified)
    while (iterations < 3) {
        if (estimate > 0) {
            estimate = (estimate + (number / estimate)) / 2;
        }
        iterations = iterations + 1;
    }

    return estimate;
}

fun get_completion_message() -> str {
    let base_message: str = "Calculation completed";
    let status: str = determine_status();
    return base_message;
}

fun determine_status() -> str {
    let check_value: i64 = 42;
    let status: str = "unknown";

    if (check_value > 0) {
        if (check_value < 50) {
            status = "normal";
        } else {
            status = "high";
        }
    } else {
        status = "error";
    }

    return status;
}

fun mathematical_operations() -> i64 {
    let a: i64 = 15;
    let b: i64 = 7;
    let c: i64 = 3;

    // Test various arithmetic operations
    let sum: i64 = a + b + c;
    let difference: i64 = a - b;
    let product: i64 = b * c;
    let quotient: i64 = a / c;

    // Test comparison operations
    let is_greater: bool = sum > product;
    let is_equal: bool = difference == b;
    let is_not_equal: bool = quotient != c;

    // Test boolean operations
    let and_result: bool = is_greater && is_equal;
    let or_result: bool = is_equal || is_not_equal;
    let not_result: bool = !and_result;

    // Complex expression
    let complex_result: i64 = ((a + b) * c) - ((a - b) / c);

    if (and_result || or_result) {
        return complex_result;
    } else {
        return sum;
    }
}

fun nested_control_structures() -> i64 {
    let outer_counter: i64 = 0;
    let total: i64 = 0;

    while (outer_counter < 3) {
        let inner_sum: i64 = 0;

        for i in 1..5 {
            if (i % 2 == 0) {
                inner_sum = inner_sum + i;
            } else {
                inner_sum = inner_sum + (i * 2);
            }
        }

        if (inner_sum > 10) {
            total = total + inner_sum;
        } else {
            total = total + (inner_sum * 2);
        }

        outer_counter = outer_counter + 1;
    }

    return total;
}

fun variable_scope_test() -> i64 {
    let global_var: i64 = 100;

    if (global_var > 50) {
        let local_var: i64 = 25;
        let combined: i64 = global_var + local_var;

        while (local_var > 0) {
            let loop_var: i64 = local_var * 2;
            combined = combined + loop_var;
            local_var = local_var - 5;
        }

        return combined;
    }

    return global_var;
}

fun string_operations() -> str {
    let first_name: str = "John";
    let last_name: str = "Doe";
    let middle_initial: str = "Q";

    let greeting: str = "Hello";
    let punctuation: str = "!";

    // In a real implementation, you might have string concatenation
    // For now, just return one of the strings
    return greeting;
}

fun boolean_logic_test() -> bool {
    let flag1: bool = true;
    let flag2: bool = false;
    let flag3: bool = true;

    let simple_and: bool = flag1 && flag2;
    let simple_or: bool = flag1 || flag2;
    let simple_not: bool = !flag2;

    let complex_expression: bool = (flag1 && flag3) || (!flag2 && flag1);
    let another_complex: bool = !(flag1 && flag2) || (flag3 && !flag2);

    return complex_expression && another_complex;
}

fun edge_case_handling() -> i64 {
    let zero: i64 = 0;
    let one: i64 = 1;
    let negative: i64 = 0 - 42;  // Representing -42

    if (zero == 0) {
        if (one > zero) {
            return one;
        }
    }

    return zero;
}
