// Expression examples - all correct syntax

fun test_arithmetic_expressions() -> i64 {
    let a: i64 = 10 + 5;
    let b: i64 = 20 - 8;
    let c: i64 = 6 * 7;
    let d: i64 = 24 / 4;
    let complex: i64 = (a + b) * (c - d);
    return complex;
}

fun test_comparison_expressions() -> bool {
    let x: i64 = 15;
    let y: i64 = 10;

    let greater: bool = x > y;
    let less: bool = x < y;
    let equal: bool = x == y;
    let not_equal: bool = x != y;
    let gte: bool = x >= y;
    let lte: bool = x <= y;

    return greater;
}

fun test_boolean_expressions() -> bool {
    let flag1: bool = true;
    let flag2: bool = false;

    let and_result: bool = flag1 && flag2;
    let or_result: bool = flag1 || flag2;
    let not_result: bool = !flag1;
    let complex: bool = (flag1 && !flag2) || (flag2 && !flag1);

    return complex;
}

fun test_mixed_expressions() -> bool {
    let num1: i64 = 25;
    let num2: i64 = 15;
    let threshold: i64 = 20;

    let condition1: bool = (num1 + num2) > (threshold * 2);
    let condition2: bool = (num1 - num2) < threshold;
    let final_result: bool = condition1 || condition2;

    return final_result;
}

fun test_nested_expressions() -> i64 {
    let base: i64 = 5;
    let multiplier: i64 = 3;
    let offset: i64 = 2;

    let result: i64 = ((base * multiplier) + offset) - (base / 2);
    return result;
}

fun test_function_call_expressions(value: i64) -> i64 {
    let doubled: i64 = multiply_by_two(value);
    let result: i64 = doubled + get_constant();
    return result;
}

fun multiply_by_two(x: i64) -> i64 {
    return x * 2;
}

fun get_constant() -> i64 {
    return 100;
}

fun test_complex_nested() -> bool {
    let a: i64 = 10;
    let b: i64 = 20;
    let c: i64 = 30;

    let complex_expr: bool = ((a + b) > c) && ((b * 2) <= (c + a)) || (a == (b - c));
    return complex_expr;
}
